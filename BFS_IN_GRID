
const ll mx=1e3+123; 
char grid[mx][mx]; 
ll n,m; 
ll lvl[mx][mx];
const ll dx[8] = {1, -1, 0, 0, 1, -1, 1, -1};
const ll dy[8] = {0, 0, 1, -1, 1, -1, -1, 1};


bool valid(ll x,ll y)
{
    if(x<0 || x>=n || y<0 || y>=m || grid[x][y]!='.' ) return 0;
    return 1;
}

void bfs( ll x1,ll y1){
   

    lvl[x1][y1]=0;
    queue<pair<ll,ll>>q; 
    q.push({x1,y1});
    while(!q.empty()){
        auto u=q.front();
        q.pop();
        ll x=u.first,y=u.second; 
        ll dist=lvl[x][y]; 
        for(ll i=0; i<4; i++){
            ll nx=x+dx[i]; 
            ll ny=y+dy[i]; 
            if(valid(nx,ny)){
               if(lvl[nx][ny]>dist+1){
                 lvl[nx][ny]=dist+1; 
                 q.push({nx,ny}); 
               }
            }

        }
        
    }
}

void clr()
{
    for(ll i=0; i<n; i++){
        for(ll j=0; j<m ;j++)
        {
            lvl[i][j]=1e11; 
            
        }
    }
}


void solve(){

   cin>>n>>m; 
   clr(); 
   for(ll i=0; i<n; i++)
   {
     for(ll k=0; k<m; k++)cin>>grid[i][k]; 
   }

   ll x1,y1,x2,y2; 
   cin>>x1>>y1;
   cin>>x2>>y2; 
   x1--; y1--; x2--; y2--;
   if(grid[x1][y1]=='-' || grid[x2][y2]=='-'){
    cout<<-1<<endl;
    return; 
   }

   bfs(x1,y1); 
   if(lvl[x2][y2]==1e11)cout<<-1<<endl;
   else cout<<lvl[x2][y2]<<endl; 


}
