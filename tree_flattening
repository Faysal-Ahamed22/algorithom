#include<bits/stdc++.h>
using namespace std;
#define ll  long long
#define pb   push_back
#define yes   cout<<"YES"<<endl
#define no   cout<<"NO"<<endl
#define all(x) (x).begin(), (x).end()
#define    gcd(a,b)      __gcd(a,b)
#define    lcm(a,b)  (a*b)/__gcd(a,b)
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

const ll mx=2e5+123; 
vector<ll>adj[mx]; 
bool vis[mx]; 
vector<ll>v(mx); 
vector<ll>st(mx),ed(mx); 
ll timer=1; 

void eular_tour(ll node)
{
    st[node]=timer++;
    vis[node]=1;  
    for(auto u:adj[node]){
        if(!vis[u])eular_tour(u); 
    }
    ed[node]=timer-1; 
}

ll t[mx*4], a[mx];
 
void init ( int id, int b, int e )
{
    if ( b == e ) {
        t[id] = a[b];
        return;
    }
 
    int mid = ( b + e ) >> 1;
    init ( id*2, b, mid );
    init ( id*2+1, mid+1, e );
 
    t[id] = t[id*2] + t[id*2+1];
}
 
void upd ( int id, int b, int e, int i, int val )
{
    if ( b > i || e < i ) return;
    if ( b == e && b == i ) {
        t[id] = val;
        return;
    }
 
    int mid = ( b + e ) >> 1;
    upd ( id*2, b, mid, i, val );
    upd ( id*2+1, mid+1, e, i, val );
 
    t[id] = t[id*2] + t[id*2+1];
}
 
ll ask ( int id, int b, int e, int l, int r )
{
    if ( b > r || e < l ) return 0;
    if ( l <= b && e <= r ) {
        return t[id];
    }
 
    int mid = ( b + e ) >> 1;
    ll sumL = ask ( id*2, b, mid, l, r );
    ll sumR = ask ( id*2+1, mid+1, e, l, r );
 
    return sumL + sumR;
}


void solve(){

   ll n,q; 
   cin>>n>>q; 
   for(ll i=1; i<=n; i++)cin>>v[i]; 
   for(ll i=1; i<n; i++){
     ll u,v; 
     cin>>u>>v; 
     adj[u].pb(v); 
     adj[v].pb(u); 

   }

   eular_tour(1); 

   for(ll i=1; i<=n; i++)a[st[i]]=v[i];
   init(1,1,n); 
   while(q--)
   {
       ll typ;
        cin >> typ;
        if ( typ == 1 ) {
           ll k, u;
            cin >> k >> u;
            upd ( 1, 1, n, st[k], u ); 
        }
        else {
            ll x; 
            cin>>x; 

            ll l=st[x], r=ed[x];
            
            cout << ask ( 1, 1, n, l, r ) << endl; 
        }
   }
  


}

int main()
{
    optimize();
   
        solve();
    
}
/*****************  ALHAMDULILLAH  *****************/
