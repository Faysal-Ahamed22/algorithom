#include<bits/stdc++.h>
using namespace std; 

typedef long long ll;
 const ll mx = 1e5+123;
 const ll inf = 9000000000000000000;
vector<pair<ll,ll>>adj[mx];
ll dist[mx];

void dijkstra( ll s, ll n )
{
     for(ll i=0; i<=n; i++)dist[i]=inf; 
     dist[s]=0; 
     priority_queue<pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>>>pq; 
     pq.push({ 0, s});
     while(!pq.empty())
     {
        ll u=pq.top().second;//node
        ll curCost=pq.top().first; // cost
        pq.pop();

        if(dist[u]<curCost)continue; 

        for(auto p: adj[u])
        {
            ll v=p.first; //node
            ll w=p.second; // cost
            if(curCost+w<dist[v])
            {
                dist[v]=curCost+w; 
                pq.push({ dist[v], v});
            }

        }
     }
   
}


int main()
{
    ll n,m; 
    cin>>n>>m; 
    for(ll i=1; i<=m; i++)
    {
        ll u,v,w; 
        cin>>u>>v>>w; 
        adj[u].push_back({ v,w });
        adj[v].push_back({ u, w});

    }
    dijkstra(0, n);
    for(ll i=0; i<n; i++)cout<<dist[i]<<" ";
    cout<<endl;
}



