 const int M=998244353;
        long long mod(long long x){
            return ((x%M + M)%M);
        }
        long long add(long long a, long long b){
            return mod(mod(a)+mod(b));
        }
        long long mul(long long a, long long b){
            return mod(mod(a)*mod(b));
        }

        //finding ( a to the power b ) % M; 

        ll modPow(ll a, ll b){
            if(b==0)
                return 1LL;
            if(b==1)
                return a%M;
            ll res=1;
            while(b){
                if(b%2==1)
                    res=mul(res,a);
                a=mul(a,a);
                b=b/2;
            }
            return res;
        }

        // precalculating factorial 

        const int N=2e5+2;
        int fact[N],inv_fact[N];

        void precalc(){
            fact[0]=1;
            for(int i=1;i<N;i++){
                fact[i]=mul(fact[i-1],i);
            }

              inv_fact[N - 1] = modPow(fact[N - 1], M - 2);  
             for (int i = N - 2; i >= 0; i--) {
             inv_fact[i] = mul(inv_fact[i + 1], i + 1); 
             } 
        }
      //finding ( x to the power of -1 ) % M; 

        ll inv(ll x){
            return modPow(x,M-2);
        }

       // finding ( a / b ) % M; 

        ll divide(ll a, ll b){
            return mul(a,inv(b));
        }

        ll nCr(ll n, ll r){
            return divide(fact[n],mul(fact[r],fact[n-r]));
        }
