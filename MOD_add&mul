
        const int N=2e6+2;
 const ll M=1e9+7; 
         long long mod(long long x){
            return (x%M);
        }
        long long add(long long a, long long b){
           return mod(mod(a)+mod(b));
        }
        long long mul(long long a, long long b){
            return mod(mod(a)*mod(b));
        }
      ll sub(ll a, ll b) {
       ll res = ( (a % M) - (b % M) + M ) % M;
      return res;
      }
 
        //finding ( a to the power b ) % M; 
 
        ll modPow(ll base, ll power){
           if (!power) return 1; // base case
            ll result = modPow(base, power/2);
              result = (result * result) % M;
            if (power & 1) result = (result * base) % M;
            return result % M;
        }
 
       
 
        // precalculating factorial 
 
       
        int fact[N];
        ll inv_fact[N];
        void precalc(){
            fact[0]=1;
            for(int i=1;i<N;i++){
                fact[i]=mul(fact[i-1],i);
                 
            }
 
             inv_fact[N - 1] = modPow(fact[N - 1], M - 2);  
             for (int i = N - 2; i >= 0; i--) {
             inv_fact[i] = mul(inv_fact[i + 1], i + 1);  
    }
        }
 
        ll inv(ll x){
            return modPow(x,M-2);
        }
 
        ll divide(ll a, ll b){
            return mul(a,inv(b));
        }
 
        ll nCr(ll n, ll r){
            if(r>n)return 0; 
            if(r==n)return 1; 
           return mul(fact[n], mul(inv_fact[r], inv_fact[n - r]));
        }
