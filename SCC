#include<bits/stdc++.h>
using namespace std;
#define ll  long long
#define pb   push_back
#define yes   cout<<"YES"<<endl
#define no   cout<<"NO"<<endl
#define all(x) (x).begin(), (x).end()
#define    gcd(a,b)      __gcd(a,b)
#define    lcm(a,b)  (a*b)/__gcd(a,b)
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

const ll mx=1e5+123; 
vector<ll>adj[mx]; 
vector<ll>radj[mx]; 
bool vis[mx]; 
ll n,m; 
stack<ll>st; 
vector<vector<ll>>scc; 
vector<ll>temp; 


void dfs1(ll node)
{
    vis[node]=1; 
    temp.pb(node); 
    for(auto it:radj[node]){
        if(!vis[it])dfs1(it); 
    }
}

void dfs(ll node)
{
    vis[node]=1; 
    for(auto it:adj[node]){
        if(!vis[it])dfs(it); 
    }
    st.push(node); 
}

void solve(){

   cin>>n>>m; 
   for(ll i=1; i<=m; i++){
      ll u,v; 
      cin>>u>>v; 
      adj[u].pb(v); 
      radj[v].pb(u); 
     
    }

    for(ll i=1; i<=n; i++){
        if(!vis[i])dfs(i); 
    }

    

    memset(vis,0,sizeof(vis)); 
    while(!st.empty())
    {
        ll node=st.top(); 
        st.pop(); 
        dfs1(node); 
        if(temp.size()){
            scc.pb(temp); 
            temp.clear(); 
        }
        while(1)
        {
            if(st.size()==0)break; 
            ll val=st.top(); 
            if(vis[val])st.pop(); 
            else break; 
        }

    }

    // for(auto u:scc)
    // {
    //     for(ll i=0; i<u.size(); i++)cout<<u[i]<<" "; 
    //     cout<<endl ;
    // }

    if(scc.size()>1){
        no; 
       cout<<scc[1][0]<<" "<<scc[0][0]<<endl;
    }
    else yes; 



}

int main()
{
    optimize();
   
        solve();

}
/*****************  ALHAMDULILLAH  *****************/
