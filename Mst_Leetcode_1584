class Solution {
public:

  vector<int> par;
    vector<int> sz;
    
    int find_par ( int u ) {
        if ( u == par[u] ) return u;
        return par[u] = find_par ( par[u] );
    }
    
    void Union ( int u, int v ) {
        if ( sz[u] < sz[v] ) swap ( u, v );
        par[v] = u;
        sz[u] += sz[v];
    }

    int dist( vector<int>p1, vector<int>p2)
    {
        return abs(p1[0]-p2[0])+abs(p1[1]-p2[1]);
    }

    int minCostConnectPoints(vector<vector<int>>& pt) {
          par.clear();
        sz.clear();
        int n=pt.size();
         par.resize( n );
        sz.resize( n );
        
        for ( int i = 0; i < n; i++ ) par[i] = i;
        
        vector<pair<int,pair<int,int>>>vp; 
        for(int i=0; i<n; i++)
        {
            for(int j=i+1; j<n; j++)
            {
                int w= dist( pt[i], pt[j]);
                vp.push_back( { w , { i , j}});
            }
        }

        sort(vp.begin(), vp.end());
        int ans=0,cnt=0; 
        for(auto e:vp)
        {
            int u=find_par(e.second.first); 
            int v=find_par(e.second.second);
            int w=e.first; 
            if( u!=v)
            {
                Union( u, v);
                ans+=w; 
                cnt++; 
                if(cnt==n-1)break; 
            }
        }
        return ans; 
        
    }
};
